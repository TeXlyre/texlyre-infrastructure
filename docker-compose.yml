services:
  traefik:
    image: traefik:v3.0
    container_name: ${COMPOSE_PROJECT_NAME}-traefik
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
      - traefik-certs:/certs
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: ${COMPOSE_PROJECT_NAME}-portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINER_HOST}`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  texlyre-frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-frontend
    restart: unless-stopped
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${FRONTEND_HOST}`)"

  texlive-ondemand-server:
    build:
      context: ./services/texlive-ondemand-server
    container_name: ${COMPOSE_PROJECT_NAME}-texlive
    restart: unless-stopped
    environment:
      - PORT=8080
      - REDIS_PORT=6379
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.texlive.rule=Host(`texlive.${BASE_DOMAIN}`)"
      - "traefik.http.services.texlive.loadbalancer.server.port=8080"

  y-webrtc-server:
    build:
      context: ./services/y-webrtc-server
    container_name: ${COMPOSE_PROJECT_NAME}-ywebrtc
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=1234
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ywebrtc.rule=Host(`ywebrtc.${BASE_DOMAIN}`)"
      - "traefik.http.services.ywebrtc.loadbalancer.server.port=1234"

  filepizza-server:
    build:
      context: ./services/filepizza-server
    container_name: ${COMPOSE_PROJECT_NAME}-filepizza
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8080
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.filepizza.rule=Host(`filepizza.${BASE_DOMAIN}`)"
      - "traefik.http.services.filepizza.loadbalancer.server.port=8080"

  peerjs-server:
    build:
      context: ./services/peerjs-server
    container_name: ${COMPOSE_PROJECT_NAME}-peerjs
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=9000
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.peerjs.rule=Host(`peerjs.${BASE_DOMAIN}`)"
      - "traefik.http.services.peerjs.loadbalancer.server.port=9000"

  redis:
    image: redis:alpine
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    restart: unless-stopped
    networks:
      - traefik
    volumes:
      - redis_data:/data

networks:
  traefik:
    name: ${COMPOSE_PROJECT_NAME}-traefik
    driver: bridge

volumes:
  traefik-certs:
  portainer_data:
  redis_data: